import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:table_calendar/table_calendar.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:curved_navigation_bar/curved_navigation_bar.dart';
import 'package:manipalleaks/timetable.js';
import 'firstYear.dart';
import 'secondYear.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'ManipalLeaks',
      theme: ThemeData(
        primarySwatch: Colors.purple,
      ),
      home: HomePage(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class HomePage extends StatefulWidget {
  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  static CalendarController _controller;
  Map<DateTime, List<dynamic>> _events = {};
  List<dynamic> _selectedEvents;
  TextEditingController _eventController;
  SharedPreferences prefs;
  List<String> tabname = ["Updates", "My Calendar", "Notes"];

  @override
  void initState() {
    super.initState();
    _controller = CalendarController();
    _eventController = TextEditingController();
    _selectedEvents = [];
    initPrefs();
  }

  initPrefs() async {
    prefs = await SharedPreferences.getInstance();
    setState(() {
      _events = Map<DateTime, List<dynamic>>.from(
          decodeMap(json.decode(prefs.getString("events") ?? "{}")));
    });
  }

  Map<String, dynamic> encodeMap(Map<DateTime, dynamic> map) {
    Map<String, dynamic> newMap = {};
    map.forEach((key, value) {
      newMap[key.toString()] = map[key];
    });
    return newMap;
  }

  Map<DateTime, dynamic> decodeMap(Map<String, dynamic> map) {
    Map<DateTime, dynamic> newMap = {};
    map.forEach((key, value) {
      newMap[DateTime.parse(key)] = map[key];
    });
    return newMap;
  }

  Widget _showEventCalendar() {
    return SingleChildScrollView(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: <Widget>[
          Container(
            margin: EdgeInsets.all(12.0),
            decoration: BoxDecoration(
                border: Border.all(color: Colors.purple),
                borderRadius: BorderRadius.circular(20.0),
                color: Colors.white,
                boxShadow: [
                  BoxShadow(
                    blurRadius: 5.0,
                    color: Colors.grey,
                    spreadRadius: 0.0,
                  )
                ]),
            child: TableCalendar(
              events: _events,
              calendarStyle: CalendarStyle(
                  canEventMarkersOverflow: true,
                  todayColor: Colors.deepPurple,
                  selectedColor: Colors.purple,
                  todayStyle: TextStyle(
                      fontWeight: FontWeight.bold,
                      fontSize: 18.0,
                      color: Colors.white)),
              headerStyle: HeaderStyle(
                centerHeaderTitle: true,
                formatButtonDecoration: BoxDecoration(
                  color: Colors.deepPurple,
                  borderRadius: BorderRadius.circular(20.0),
                ),
                formatButtonTextStyle: TextStyle(color: Colors.white),
                formatButtonShowsNext: false,
              ),
              startingDayOfWeek: StartingDayOfWeek.sunday,
              onDayLongPressed: (date, events) {
                _showDaySelectedEvents(date, events);
              },
              onDaySelected: (date, events) {
                setState(() {
                  _selectedEvents = events;
                });
              },
              builders: CalendarBuilders(
                selectedDayBuilder: (context, date, events) => Container(
                    margin: const EdgeInsets.all(4.0),
                    alignment: Alignment.center,
                    decoration: BoxDecoration(
                        color: Colors.purple,
                        borderRadius: BorderRadius.circular(15.0)),
                    child: Text(
                      date.day.toString(),
                      style: TextStyle(color: Colors.white),
                    )),
                todayDayBuilder: (context, date, events) => Container(
                    margin: const EdgeInsets.all(4.0),
                    alignment: Alignment.center,
                    decoration: BoxDecoration(
                        color: Colors.deepPurple,
                        borderRadius: BorderRadius.circular(10.0)),
                    child: Text(
                      date.day.toString(),
                      style: TextStyle(color: Colors.white),
                    )),
              ),
              calendarController: _controller,
            ),
          ),
          GestureDetector(
            child: Container(
              margin: EdgeInsets.fromLTRB(10.0, 5.0, 10.0, 5.0),
              decoration: BoxDecoration(
                  border: Border.all(color: Colors.purple),
                  borderRadius: BorderRadius.circular(12.0),
                  color: Colors.purple,
                  boxShadow: [
                    BoxShadow(
                        color: Colors.grey, spreadRadius: 2.0, blurRadius: 2.0)
                  ]),
              child: Row(
                crossAxisAlignment: CrossAxisAlignment.center,
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(
                    Icons.add,
                    color: Colors.white,
                    size: 30.0,
                  ),
                  Text(
                    " Add Event",
                    style: TextStyle(color: Colors.white, fontSize: 20.0),
                  )
                ],
              ),
            ),
            onTap: () {
              _showAddDialog();
            },
          ),
          ..._selectedEvents.map((event) => Card(
            margin: EdgeInsets.fromLTRB(10.0, 5.0, 10.0, 1.0),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(20.0)
              ),
              child: ListTile(
                  shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(20.0)),
                  title: Text(event),
                  subtitle: Text('${_controller.selectedDay}'),
                  leading: Icon(
                    Icons.event,
                    color: Colors.purple,
                  ),
                  trailing: GestureDetector(
                      child: Icon(
                        Icons.delete,
                        color: Colors.purple,
                      ),
                      onTap: () {
                        setState(() {
                          _selectedEvents.remove(event);
                          prefs.clear();
                        });
                      })))),
        ],
      ),
    );
  }

  int _currentIndex = 1;

  Widget drawerTabs(var img, var name, var url) {
    return InkWell(
      child: ListTile(
        title: Text(
          name,
          style: TextStyle(fontWeight: FontWeight.w400, fontSize: 17.0),
        ),
        leading: Image(
          image: AssetImage(img),
          width: 25.0,
        ),
        onTap: () {
          _launchURL(url);
        },
      ),
    );
  }

  _buildDrawer() {
    return Drawer(
      child: ListView(
        children: [
          UserAccountsDrawerHeader(
            accountName: Text(
              'ManipalLeaks',
              style: TextStyle(fontSize: 15.0),
            ),
            accountEmail: InkWell(
              onTap: () {
                _launchURL('mailto:manipal.qpleaks@gmail.com');
              },
              child: Text('manipal.qpleaks@gmail.com'),
            ),
            currentAccountPicture: CircleAvatar(
              backgroundImage: AssetImage('assets/profile.jpeg'),
              backgroundColor: Colors.white,
              maxRadius: 60.0,
            ),
          ),
          drawerTabs('assets/instalogo.jpg', 'Instagram',
              'https://www.instagram.com/manipalleaks/'),
          Divider(),
        ],
      ),
    );
  }

  _launchURL(url) async {
    if (await canLaunch(url)) {
      await launch(url);
    } else {
      throw 'Could Not Launch $url';
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(
          title: Text(tabname[_currentIndex]),
          centerTitle: true,
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(20.0)),
        ),
        drawer: _buildDrawer(),
        backgroundColor: Colors.purple[50],
        body: selectBodyTab(_currentIndex),
        bottomNavigationBar: CurvedNavigationBar(
          items: [
            Icon(Icons.update, color: Colors.white),
            Icon(Icons.event, color: Colors.white),
            Icon(Icons.note, color: Colors.white)
          ],
          index: _currentIndex,
          onTap: (index) {
            setState(() {
              _currentIndex = index;
            });
          },
          color: Colors.purple,
          backgroundColor: Colors.purple[50],
          height: 50.0,
          animationDuration: Duration(milliseconds: 300),
        ));
  }

  _showAddDialog() async {
    await showDialog(
        context: context,
        builder: (context) => AlertDialog(
              title: Text("Enter Event Details:"),
              content: TextField(
                controller: _eventController,
              ),
              actions: <Widget>[
                FlatButton(
                  child: Text("Save"),
                  onPressed: () {
                    if (_eventController.text.isEmpty) return Offstage();
                    if (_events[_controller.selectedDay] != null) {
                      _events[_controller.selectedDay]
                          .add(_eventController.text);
                    } else {
                      _events[_controller.selectedDay] = [
                        _eventController.text
                      ];
                    }
                    Navigator.pop(context);
                    print(_events.toString());

                    prefs.setString("events", json.encode(encodeMap(_events)));
                    _eventController.clear();
                    setState(() {
                      _selectedEvents = _events[_controller.selectedDay];
                    });
                  },
                )
              ],
            ));
  }

  _showDaySelectedEvents(date, events) async {
    await showDialog(
        context: context,
        builder: (context) => AlertDialog(
              scrollable: true,
              title: Text('${date.day} - ${date.month} - ${date.year}'),
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(20.0)),
              content: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                mainAxisAlignment: MainAxisAlignment.start,
                children: [
                  Text(
                    'Events: ',
                    style: TextStyle(
                      fontSize: 20.0,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                  Divider(),
                  ...events.map((event) => ListTile(
                        title: Text(event),
                        subtitle: Text('Details'),
                      )),
                ],
              ),
              actions: [
                new FlatButton(
                    onPressed: () {
                      Navigator.pop(context);
                    },
                    child: Text('OK'))
              ],
            ));
  }

  selectBodyTab(index) {
    switch (index) {
      case 0:
        return Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.start,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              Card(
                  shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12.0)),
                  child: ListTile(
                    leading: Icon(Icons.update),
                    title: Text("Update 1.0.3"),
                    subtitle: Text("Update Details"),
                  )),
              Card(
                  shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12.0)),
                  child: ListTile(
                    leading: Icon(Icons.update),
                    title: Text("Update 1.0.2"),
                    subtitle: Text("Update Details"),
                  )),
              Card(
                  shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12.0)),
                  child: ListTile(
                    leading: Icon(Icons.update),
                    title: Text("Update 1.0.1"),
                    subtitle: Text("Update Details"),
                  )),
              Card(
                  shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12.0)),
                  child: ListTile(
                    leading: Icon(Icons.update),
                    title: Text("Update 1.0.0"),
                    subtitle: Text("Update Details"),
                  )),
            ],
          ),
        );
        break;

      case 1:
        return _showEventCalendar();
        break;

      case 2:
        List<String> years = [
          "First Year",
          "Second Year",
          "Third Year",
          "Fourth Year"
        ];
        return Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            ...years.map(
              (e) => Card(
                  shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12.0)),
                  shadowColor: Colors.black,
                  child: ListTile(
                    title: Text(e),
                    onTap: () {
                      switch (e) {
                        case "First Year":
                          Navigator.push(
                              context,
                              MaterialPageRoute(
                                  builder: (context) => FirstYear()));
                          break;
                        case "Second Year":
                          Navigator.push(
                              context,
                              MaterialPageRoute(
                                  builder: (context) => SecondYear()));
                          break;
                        default:
                      }
                    },
                  )),
            )
          ],
        );
        break;
      default:
    }
  }
}
